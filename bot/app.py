# bot/app.py
import asyncio
import logging
import time
import uuid
from collections import Counter
from functools import wraps
from datetime import datetime, date, time as dtime, timedelta

import pytz
from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from dateutil import parser as dtparser

import config
import sheets
from parser import parse_freeform
from logsetup import setup_logging

# --------- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---------
setup_logging()
log = logging.getLogger("app")

# --------- Telegram bot ---------
bot = Bot(
    token=config.TELEGRAM_BOT_TOKEN,
    default=DefaultBotProperties(parse_mode="HTML")
)
dp = Dispatcher()
scheduler = AsyncIOScheduler(timezone=config.TZ)

# =================== Helpers ===================

def _now_tz():
    """–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –∑–∞–¥–∞–Ω–Ω–æ–π TZ"""
    return datetime.now(pytz.timezone(config.TZ))


def _parse_hhmm(s: str):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ HH:MM"""
    try:
        hh, mm = map(int, s.split(":"))
        return hh, mm
    except ValueError:
        raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: {s}. –û–∂–∏–¥–∞–µ—Ç—Å—è HH:MM")


async def _send_chat(text: str, thread_label: str | None = None, fallback_thread_id: int | None = None, **ctx):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç –∏–ª–∏ –≤ —Ç—Ä–µ–¥"""
    thread_id = None
    if thread_label:
        thread_id = sheets.get_thread_id(thread_label)
    if thread_id is None:
        thread_id = fallback_thread_id

    if thread_id is None:
        log.warning("no_thread_id_found", extra={"thread_label": thread_label})
        return await bot.send_message(chat_id=config.TELEGRAM_CHAT_ID, text=text)

    log.info("send_message", extra={"thread_label": thread_label, "thread_id": thread_id, **ctx})
    await bot.send_message(chat_id=config.TELEGRAM_CHAT_ID, text=text, message_thread_id=thread_id)


def _overdue_tasks():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
    tasks = sheets.list_tasks(status=None)
    res = []
    for r in tasks:
        if r.get("Status") == "done":
            continue
        due = r.get("Due")
        if due:
            try:
                d = date.fromisoformat(due)
                if d < _now_tz().date():
                    res.append(r)
            except Exception:
                log.exception("parse_due_failed", extra={"due": due, "task": r})
    return res


def with_timing(fn_name: str):
    """–ó–∞–º–µ—Ä –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤"""
    def deco(func):
        @wraps(func)
        async def wrapper(*args, **kwargs):
            t0 = time.perf_counter()
            try:
                return await func(*args)
            finally:
                dt = (time.perf_counter() - t0) * 1000
                log.info("handler_timing", extra={"handler": fn_name, "ms": round(dt, 2)})
        return wrapper
    return deco


def _to_aware(dt_naive, tzname: str):
    tz = pytz.timezone(tzname)
    return tz.localize(dt_naive) if dt_naive.tzinfo is None else dt_naive.astimezone(tz)


def parse_when(text: str, tzname: str) -> datetime:
    """
    –ü–∞—Ä—Å–µ—Ä –≤—Ä–µ–º–µ–Ω–∏:
    - –ê–±—Å–æ–ª—é—Ç–Ω–æ: "2025-09-05 14:30"
    - –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ: "+30m", "+2h", "+1d"
    - –†—É—Å—Å–∫–∏–µ –∫—Ä–∞—Ç–∫–∏–µ: "–∑–∞–≤—Ç—Ä–∞ 10:00", "—Å–µ–≥–æ–¥–Ω—è 18:00"
    """
    text = text.strip().lower()

    # –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ
    if text.startswith("+"):
        num = int("".join(ch for ch in text if ch.isdigit()))
        if text.endswith("m"):
            dt = _now_tz() + timedelta(minutes=num)
        elif text.endswith("h") or text.endswith("—á"):
            dt = _now_tz() + timedelta(hours=num)
        elif text.endswith("d") or text.endswith("–¥"):
            dt = _now_tz() + timedelta(days=num)
        else:
            raise ValueError("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–Ω—ã–π –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (+30m|+2h|+1d)")
        return dt

    # –∑–∞–≤—Ç—Ä–∞
    if text.startswith("–∑–∞–≤—Ç—Ä–∞"):
        parts = text.split()
        base = _now_tz().date() + timedelta(days=1)
        default_time = dtime(hour=9)
        if len(parts) > 1:
            tm = dtparser.parse(parts[1]).time()
            return _to_aware(datetime.combine(base, tm), config.TZ)
        return _to_aware(datetime.combine(base, default_time), config.TZ)

    # —Å–µ–≥–æ–¥–Ω—è
    if text.startswith("—Å–µ–≥–æ–¥–Ω—è"):
        parts = text.split()
        base = _now_tz().date()
        default_time = dtime(hour=9)
        if len(parts) > 1:
            tm = dtparser.parse(parts[1]).time()
            return _to_aware(datetime.combine(base, tm), config.TZ)
        return _to_aware(datetime.combine(base, default_time), config.TZ)

    # –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –¥–∞—Ç—ã
    try:
        dt = dtparser.parse(text, dayfirst=False)
    except Exception:
        raise ValueError(f"–ù–µ –º–æ–≥—É —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É: {text}")

    if dt.tzinfo is None:
        dt = _to_aware(dt, config.TZ)
    else:
        dt = dt.astimezone(pytz.timezone(config.TZ))
    return dt


def _fmt_task_line(r: dict) -> str:
    first_label = (r.get("Labels") or "").split(",")[0].strip() if r.get("Labels") else ""
    return (
        f"<code>{r['ID']}</code> ‚Ä¢ <b>{r['Title']}</b> ‚Ä¢ {r.get('Priority','') or '‚Äî'} ‚Ä¢ "
        f"{r.get('Assignee','') or '‚Äî'}"
        + (f" ‚Ä¢ –¥–æ {r['Due']}" if r.get('Due') else "")
        + (f" ‚Ä¢ #{first_label}" if first_label else "")
    )


def _parse_status(tokens: list[str]) -> str | None:
    statuses = {"open", "in_progress", "done", "blocked"}
    for t in tokens:
        if t in statuses:
            return t
    return None


def _parse_labels(tokens: list[str]) -> list[str]:
    return [t.lstrip("#") for t in tokens if t.startswith("#")]


def _parse_users(tokens: list[str]) -> list[str]:
    return [t for t in tokens if t.startswith("@")]


def _has_any_label(row: dict, labels: list[str]) -> bool:
    if not labels:
        return True
    row_labels = [s.strip() for s in str(row.get("Labels", "")).split(",") if s.strip()]
    return any(lbl in row_labels for lbl in labels)


# ---------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ----------

def _top_labels(limit: int = 6) -> list[str]:
    """–í–µ—Ä–Ω—É—Ç—å —Ç–æ–ø-–ª–µ–π–±–ª—ã –ø–æ —á–∞—Å—Ç–æ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –∫–Ω–æ–ø–æ–∫)."""
    try:
        rows = sheets.list_tasks(status=None)
        cnt = Counter()
        for r in rows:
            labs = [s.strip() for s in str(r.get("Labels", "")).split(",") if s.strip()]
            cnt.update(labs)
        return [l for l, _ in cnt.most_common(limit)]
    except Exception as e:
        log.warning("top_labels_failed", extra={"err": str(e)})
        return []

def build_main_kb() -> ReplyKeyboardMarkup:
    """
    Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –±—ã—Å—Ç—Ä—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏:
    - /add, /my, /my open, /my in_progress, /my done
    - –¢–æ–ø-–ª–µ–π–±–ª—ã –∫–∞–∫ /labels #<name>
    - /list open, /summary, /who
    –ö–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥ (—É–¥–æ–±–Ω–æ –∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ).
    """
    labels = _top_labels(6)
    label_buttons = []
    for l in labels:
        label_buttons.append(KeyboardButton(text=f"/labels #{l}"))

    # –†–∞–∑–∫–ª–∞–¥–∫–∞
    rows = [
        [KeyboardButton(text="‚ûï /add"), KeyboardButton(text="üßæ /my")],
        [KeyboardButton(text="My open"), KeyboardButton(text="My in_progress"), KeyboardButton(text="My done")],
    ]

    # –î–æ–±–∞–≤–∏–º —Ä—è–¥(–∞) —Å –ª–µ–π–±–ª–∞–º–∏ –ø–æ 3 –∫–Ω–æ–ø–∫–∏
    if label_buttons:
        for i in range(0, len(label_buttons), 3):
            rows.append(label_buttons[i:i+3])

    rows.append([KeyboardButton(text="üìã /list open"), KeyboardButton(text="üìä /summary"), KeyboardButton(text="üë§ /who")])

    return ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True, input_field_placeholder="–ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã‚Ä¶", selective=True)


# =================== Commands ===================

@dp.message(Command("start", "help"))
@with_timing("help")
async def cmd_help(m: Message):
    await m.reply(
        (
            "<b>–ö–æ–º–∞–Ω–¥—ã</b>\n"
            "/add &lt;—Ç–µ–∫—Å—Ç&gt; ‚Äî —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É\n"
            "/list [status|@assignee|#label] ‚Äî –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫\n"
            "/my [status] [#label] ‚Äî –º–æ–∏ –∑–∞–¥–∞—á–∏\n"
            "/for @user1 [@user2 ...] [status] [#label] ‚Äî –∑–∞–¥–∞—á–∏ –ª—é–¥–µ–π\n"
            "/labels #lab1 [#lab2 ...] [status] ‚Äî –∑–∞–¥–∞—á–∏ –ø–æ –ª–µ–π–±–ª–∞–º\n"
            "/done &lt;ID&gt; ‚Äî –∑–∞–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É\n"
            "/assign &lt;ID&gt; @user ‚Äî –Ω–∞–∑–Ω–∞—á–∏—Ç—å\n"
            "/due &lt;ID&gt; YYYY-MM-DD ‚Äî —Å—Ä–æ–∫\n"
            "/who ‚Äî —Å–≤–æ–¥–∫–∞ –ø–æ –ª—é–¥—è–º\n"
            "/bind #label ‚Äî –ø—Ä–∏–≤—è–∑–∞—Ç—å —Ç—Ä–µ–¥ –∫ –ª–µ–π–±–ª—É\n"
            "/summary ‚Äî —Å–≤–æ–¥–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
            "/remind &lt;ID&gt; &lt;–≤—Ä–µ–º—è&gt; ‚Äî –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (+30m, –∑–∞–≤—Ç—Ä–∞ 10:00)\n"
            "/kb ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –±—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏, /hidekb ‚Äî —Å–∫—Ä—ã—Ç—å\n"
        ).strip(),
        reply_markup=build_main_kb()
    )


@dp.message(Command("kb"))
@with_timing("keyboard_show")
async def cmd_kb(m: Message):
    await m.reply("–ë—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ –≤–∫–ª—é—á–µ–Ω—ã.", reply_markup=build_main_kb())


@dp.message(Command("hidekb"))
@with_timing("keyboard_hide")
async def cmd_hidekb(m: Message):
    await m.reply("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∫—Ä—ã—Ç–∞. –í–∫–ª—é—á–∏—Ç—å: /kb", reply_markup=ReplyKeyboardRemove())


@dp.message(Command("bind"))
@with_timing("bind")
async def cmd_bind(m: Message):
    if not m.message_thread_id:
        return await m.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ —Ç—Ä–µ–¥–∞ (—Ñ–æ—Ä—É–º-—Ç–æ–ø–∏–∫–∞).")
    text = m.text.partition(" ")[2].strip()
    if not text.startswith("#"):
        return await m.reply("–ü—Ä–∏–º–µ—Ä: /bind #frontend")

    label = text.lstrip("#").strip()
    sheets.bind_thread(label, m.message_thread_id)
    await m.reply(f"‚úÖ –¢—Ä–µ–¥ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ª–µ–π–±–ª—É <b>#{label}</b>")


@dp.message(Command("add"))
@with_timing("add")
async def cmd_add(m: Message):
    text = m.text.partition(" ")[2].strip()
    if not text:
        return await m.reply("–ü—Ä–∏–º–µ—Ä: /add –ü–æ—á–∏–Ω–∏—Ç—å –¥–µ–ø–ª–æ–π P1 @vadim –¥–æ 2025-09-05 #deploy #frontend")

    title, priority, assignee, due, labels, project = parse_freeform(text)
    thread_id = m.message_thread_id or (sheets.get_thread_id(project) if project else None)

    t = sheets.create_task(
        title=title,
        description="",
        assignee=assignee,
        priority=priority,
        due=due,
        labels=labels,
        source="tg",
        tg_thread_id=thread_id,
        tg_message_link=f"https://t.me/c/{str(m.chat.id).replace('-100','')}/{m.message_id}"
    )

    await bot.send_message(
        chat_id=config.TELEGRAM_CHAT_ID,
        message_thread_id=thread_id,
        text=(f"‚úÖ <b>–°–æ–∑–¥–∞–Ω–æ</b>: {t.title}\n"
              f"ID: <code>{t.id}</code> | {t.priority} | {assignee or '‚Äî'}"
              f"{f' | –¥–æ {due}' if due else ''}\n"
              f"Labels: {', '.join(labels) if labels else '‚Äî'}")
    )


@dp.message(Command("list"))
@with_timing("list")
async def cmd_list(m: Message):
    arg = m.text.partition(" ")[2].strip()
    status = arg if arg in {"open", "in_progress", "done", "blocked"} else None
    assignee = arg if arg.startswith('@') else None
    label = arg.lstrip("#") if arg.startswith("#") else None

    tasks = sheets.list_tasks(status=status, assignee=assignee, label=label)
    if not tasks:
        return await m.reply("–ü—É—Å—Ç–æ")

    lines = []
    for r in tasks[:50]:
        lines.append(
            f"<code>{r['ID']}</code> ‚Ä¢ <b>{r['Title']}</b> ‚Ä¢ {r['Priority']} ‚Ä¢ {r.get('Assignee','') or '‚Äî'}"
            + (f" ‚Ä¢ –¥–æ {r['Due']}" if r.get('Due') else "")
            + (f" ‚Ä¢ #{(r.get('Labels') or '').split(',')[0]}" if r.get('Labels') else "")
        )
    await m.reply("\n".join(lines))


@dp.message(Command("my"))
@with_timing("my")
async def cmd_my(m: Message):
    # —Å–æ–±–µ—Ä—ë–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    args = (m.text or "").split()[1:]
    status = _parse_status(args)
    labels = _parse_labels(args)

    me = (m.from_user.username and "@"+m.from_user.username) or None
    if not me:
        return await m.reply("–£ –≤–∞—Å –Ω–µ—Ç username –≤ Telegram. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö, —á—Ç–æ–±—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ @username.")

    # –ø–æ–ª—É—á–∏–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é –∏ —Å—Ç–∞—Ç—É—Å—É
    tasks = sheets.list_tasks(status=None, assignee=None, label=None)
    res = []
    for r in tasks:
        if status and r.get("Status") != status:
            continue
        if me.lower() not in str(r.get("Assignee","")).lower():
            continue
        if not _has_any_label(r, labels):
            continue
        res.append(r)

    if not res:
        return await m.reply("–ü—É—Å—Ç–æ")
    await m.reply("\n".join(_fmt_task_line(x) for x in res[:50]))


@dp.message(Command("for"))
@with_timing("for_users")
async def cmd_for(m: Message):
    args = (m.text or "").split()[1:]
    users = _parse_users(args)
    if not users:
        return await m.reply("–ü—Ä–∏–º–µ—Ä: /for @alice @bob open #frontend")

    status = _parse_status(args)
    labels = _parse_labels(args)

    tasks = sheets.list_tasks(status=None, assignee=None, label=None)
    res = []
    u_lower = [u.lower() for u in users]
    for r in tasks:
        if status and r.get("Status") != status:
            continue
        ass = str(r.get("Assignee","")).lower()
        if not any(u in ass for u in u_lower):
            continue
        if not _has_any_label(r, labels):
            continue
        res.append(r)

    if not res:
        return await m.reply("–ü—É—Å—Ç–æ")
    await m.reply("\n".join(_fmt_task_line(x) for x in res[:50]))


@dp.message(Command("labels"))
@with_timing("labels")
async def cmd_labels(m: Message):
    args = (m.text or "").split()[1:]
    labels = _parse_labels(args)
    if not labels:
        return await m.reply("–ü—Ä–∏–º–µ—Ä: /labels #frontend #backend open")

    status = _parse_status(args)

    tasks = sheets.list_tasks(status=None, assignee=None, label=None)
    res = []
    for r in tasks:
        if status and r.get("Status") != status:
            continue
        if not _has_any_label(r, labels):
            continue
        res.append(r)

    if not res:
        return await m.reply("–ü—É—Å—Ç–æ")
    await m.reply("\n".join(_fmt_task_line(x) for x in res[:50]))


@dp.message(Command("done"))
@with_timing("done")
async def cmd_done(m: Message):
    tid = m.text.partition(" ")[2].strip()
    if not tid:
        return await m.reply("–£–∫–∞–∂–∏ ID: /done 1a2b3c4d")
    ok = sheets.update_status(tid, "done")
    await m.reply("‚úÖ –ì–æ—Ç–æ–≤–æ" if ok else "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ")


@dp.message(Command("who"))
@with_timing("who")
async def cmd_who(m: Message):
    tasks = sheets.list_tasks(status="open")
    buckets = {}
    for r in tasks:
        buckets.setdefault(r.get("Assignee") or "(–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ)", 0)
        buckets[r.get("Assignee") or "(–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ)"] += 1
    text = "\n".join(f"<b>{k}</b>: {v}" for k, v in buckets.items()) or "–ü—É—Å—Ç–æ"
    await m.reply(text)


@dp.message(Command("summary"))
@with_timing("summary_manual")
async def cmd_summary(m: Message):
    await send_daily_summary()


# =================== Schedules ===================

@with_timing("send_daily_summary")
async def send_daily_summary():
    open_tasks = sheets.list_tasks(status=None)
    by_assignee = {}
    overdue = 0
    for r in open_tasks:
        if r.get("Status") == "done":
            continue
        k = r.get("Assignee") or "(–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ)"
        by_assignee[k] = by_assignee.get(k, 0) + 1
        d = r.get("Due")
        if d:
            try:
                if date.fromisoformat(d) < _now_tz().date():
                    overdue += 1
            except Exception:
                log.exception("summary_due_parse_fail", extra={"due": d, "task": r})

    lines = ["<b>–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –∑–∞–¥–∞—á</b>"]
    for k, v in sorted(by_assignee.items(), key=lambda x: (-x[1], x[0].lower())):
        lines.append(f"{k}: {v}")
    lines.append(f"–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: <b>{overdue}</b>")

    await _send_chat("\n".join(lines), thread_label=config.SUMMARY_LABEL)


def schedule_jobs():
    hh, mm = _parse_hhmm(config.DAILY_SUMMARY_HHMM)
    scheduler.add_job(send_daily_summary, "cron", hour=hh, minute=mm, id="daily_summary", replace_existing=True)
    scheduler.start()
